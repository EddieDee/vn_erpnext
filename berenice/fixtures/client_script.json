[
 {
  "docstatus": 0,
  "doctype": "Client Script",
  "dt": "Customer",
  "enabled": 1,
  "modified": "2018-11-15 17:33:45.894418",
  "name": "Customer-Client",
  "parent": null,
  "parentfield": null,
  "parenttype": null,
  "script": "frappe.ui.form.on(\"Customer\", {\ncustomer_type: function(frm) {\nfrm.set_df_property(\"tax_id\", \"reqd\", \"Businesses\"|| \"Government Entities\" || \"Non-profit Organizations\" ? 1 : 0);\nif(frm.doc.customer_type==\"Final Clients\"){\nfrm.set_value('tax_id', '');\nfrm.set_df_property(\"tax_id\", \"reqd\", \"Final Clients\" ? 0 : 1);\nconsole.log(\"Cambio: \"+ cur_frm.doc.customer_type);\n} else if (frappe.quick_entry){\nif(frappe.quick_entry.doc.customer_type == \"Final Clients\"){\nconsole.log(\"Cambio a: \"+ frappe.quick_entry.doc.customer_type);\nfrappe.quick_entry.set_value('tax_id', '');\nfrappe.quick_entry.set_df_property(\"tax_id\", \"reqd\", \"Final Clients\" ? 0 : 1);\n}\n}\n\nconsole.log(\"Set: \"+ frm.doc.customer_type );\nconsole.log(\"Set NCF: \"+ cur_dialog.doc.tax_id );\n}\n});",
  "view": "Form"
 },
 {
  "docstatus": 0,
  "doctype": "Client Script",
  "dt": "Purchase Receipt",
  "enabled": 0,
  "modified": "2019-01-23 11:05:45.800299",
  "name": "Purchase Receipt Item-Client",
  "parent": null,
  "parentfield": null,
  "parenttype": null,
  "script": "/* CUSTOM FUNCTION WITH BARCODE SCANNER SEND ENTER TO TAB*/\n$(document).keyup(function (e) {\n    if (e.keyCode == 13) {\n        e.preventDefault();\n\te.prev().focus();\n\tconsole.log(\"enter pressed\");\n\treturn false;\n    }\n});\n/* END CUSTOM FUNCTION WITH BARCODE SCANNER SEND ENTER TO TAB*/\n",
  "view": "Form"
 },
 {
  "docstatus": 0,
  "doctype": "Client Script",
  "dt": "POS Closing Entry",
  "enabled": 1,
  "modified": "2021-08-22 23:53:19.766422",
  "name": "POS Closing Voucher-Client",
  "parent": null,
  "parentfield": null,
  "parenttype": null,
  "script": "// make a field read-only after saving \nfrappe.ui.form.on('POS Closing Voucher', { \n\tonload: function(frm){\n        \tfrm.set_df_property(\"period_start_date\",\"read_only\",0);\n\t\tfrm.set_df_property(\"period_end_date\",\"read_only\",0);\n\t\tconsole.log(\"sdfs\");\n \t}\n \n});",
  "view": "Form"
 },
 {
  "docstatus": 0,
  "doctype": "Client Script",
  "dt": "Purchase Invoice",
  "enabled": 1,
  "modified": "2018-10-25 13:01:32.146704",
  "name": "Purchase Invoice-Client",
  "parent": null,
  "parentfield": null,
  "parenttype": null,
  "script": "const taxid = function (){\nif(cur_frm.doc.supplier && !cur_frm.doc.tax_id){\nfrappe.call({\n                                               method: 'frappe.client.get_value',\n                                               freeze: true,\n                                               args: {\n                                                   'doctype': 'Supplier',\n                                                   'filters': {'name': cur_frm.doc.supplier},\n                                                   'fieldname': [\n                                                    'tax_id',\n                                                   ]\n                                               },\n                                               callback: function(r) {\n                                                   if (!r.exc) {\n            \n                                               var tax_id = r.message.tax_id;\nconsole.log(tax_id);\n\t\t\t\t\t\t//return tax_id;\n           \n                                                   cur_frm.set_value('tax_id',tax_id);\n            \n                                                  }\n                                           }\n                                           });\n}\n}\n\nfrappe.ui.form.on(\"Purchase Invoice\", {\nrefresh : function(){\nconsole.log('actualizado!!');\ntaxid();\n},\nsupplier: function (frm) {\n\nconsole.log(taxid());\nconsole.log('supplier loaded: '+frm.doc.supplier+'-');\n}\n});\n\nfrappe.ui.form.on(\"Purchase Invoice\", {\nbefore_cancel: function(frm) {\nif(frm.doc.docstatus==1 && !frm.timeline.get_communications().length){\n//frappe.validated = false;\nfrappe.throw(__(\"Please Comment before Cancel\"));\n}\n},\n});",
  "view": "Form"
 },
 {
  "docstatus": 0,
  "doctype": "Client Script",
  "dt": "Stock Entry",
  "enabled": 1,
  "modified": "2018-08-24 09:40:30.102426",
  "name": "Stock Entry-Client",
  "parent": null,
  "parentfield": null,
  "parenttype": null,
  "script": "frappe.ui.form.on(\"Stock Entry Detail\", {\n\titem_code: function(frm, cdt, cdn) {\n\t\tvar child = locals[cdt][cdn];\n\t\tvar tax = 0;\n\t\tme.frm.call({\n\t\t\tmethod: \"frappe.client.get_value\",\n\t\t\targs: {\n\t\t\t\tdoctype: \"Item Tax\",\n\t\t\t\tfieldname: \"tax_rate\",\n\t\t\t\tfilters: { item_code: child.item_code},\n\t\t\t},\n\t\t\tcallback: function(r, rt) {\n\t\t\t\tif(r.message) {\n\t\t\t\t\tconsole.log(r.message);\n\t}\n\t\t\t}\n\t\t});\n\n\n\n\t\tme.frm.call({\n\t\t\tmethod: \"frappe.client.get_value\",\n\t\t\targs: {\n\t\t\t\tdoctype: \"Item Price\",\n\t\t\t\tfieldname: \"price_list_rate\",\n\t\t\t\tfilters: { item_code: child.item_code, price_list : frm.doc.selling_price_list},\n\t\t\t},\n\t\t\tcallback: function(r, rt) {\n\t\t\t\tif(r.message) {\n\t\t\t\t\tfrappe.model.set_value(cdt, cdn, \"price_list_rate\", r.message.price_list_rate*1.18);\n\ncur_frm.doc.items[0];\n/*console.log(child.tax_rate)*/\n\t}\n\t\t\t}\n\t\t});\n\t}\n});\n\n\n/*frappe.ui.form.on(\"Stock Entry Detail\", {\nitem_code: function(frm, cdt, cdn) {\n\t\tchild = locals[cdt][cdn];\n\t\tme.frm.call({\n\t\t\tmethod: \"frappe.client.get_value\",\n\t\t\targs: {\n\t\t\t\tdoctype: \"Item Price\",\n\t\t\t\tfieldname: \"price_list_rate\",\n\t\t\t\tfilters: { item_code: item_code, price_list : 'Standard Buying'},\n\t\t\t},\n\t\t\tcallback: function(r, rt) {\n\t\t\t\tif(r.message) {\n\t\t\t\t\tfrappe.model.set_value(cdt, cdn, 'basic_rate', r.message.price_list_rate);\n\t\t\t\t\tconsole.log(r.message);\n\t\t\t\t}\n\t\t\t}\n\t\t});\n\t}\t\n});*/",
  "view": "Form"
 },
 {
  "docstatus": 0,
  "doctype": "Client Script",
  "dt": "Item",
  "enabled": 1,
  "modified": "2018-06-01 12:05:06.632205",
  "name": "Item-Client",
  "parent": null,
  "parentfield": null,
  "parenttype": null,
  "script": "/*frappe.ui.form.on(\"Item\", \"refresh\", function(frm, cdt, cdn){\n\t\t\tfrappe.call({\n\t\t\t\tmethod: \"frappe.client.get_value\",\n\t\t\t\targs: {\n\t\t\t\t\tdoctype: \"Stock Ledger Entry\",\n\t\t\t\t\tfieldname: \"valuation_rate\",\n\t\t\t\t\tfilters: { item_code: cur_frm.doc.item_code},\n\t\t\t\t      },\n\t\t\t\tcallback: function(r, rt) {\n\t\t\t\t\tif(r.message){\n\t\t\t\t\t\tconsole.log(r.message.valuation_rate);\n\t\t\t\t\t\tcur_frm.set_value('latest_cost', r.message.valuation_rate);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\t});\n\t});\n\n\n*/",
  "view": "Form"
 },
 {
  "docstatus": 0,
  "doctype": "Client Script",
  "dt": "Sales Invoice",
  "enabled": 1,
  "modified": "2021-09-01 10:25:33.762154",
  "name": "Sales Invoice-Client",
  "parent": null,
  "parentfield": null,
  "parenttype": null,
  "script": "/* CUSTOM FUNCTION */\n\nconst isg_ncf= function(){\nlet value = arguments[0];\n//console.log(value +' << checkbox on'+arguments[0]);\nif (arguments[0]){\n//console.log(value+' << ncf checked'); \n$(\"input[data-fieldname=g_ncf]\").prop('checked', value);\ncur_frm.set_value('generate_ncf', value);\n//console.log('Arg-->'+arguments.length+' Checked--> '+value);\n}else{\nlet res=$(\"input[data-fieldname=g_ncf]\").prop(\"checked\") | 0;\n$(\"input[data-fieldname=g_ncf]\").prop('checked', value);\nconsole.log(' Checked--> '+res);\n//return res;\n}\n}\n//function imprimir(){\n//console.log('pagando con CC');\n//}\n\nfunction check_cc(){\ntry{\n\tlet cc = cur_frm.doc.payments[2].amount;\n\tconsole.log(cc);\n\tif(cc){\n\t\tisg_ncf(1);\n\t\tconsole.log('pagando con CC'+cur_frm.doc.payments[2].amount);\n\t}\n}catch(err){\n\tconsole.log('Houston we have a problem,No fue con tarjeta: : '+err);\n}\n}\n\nfrappe.ui.form.on('Sales Invoice', { \nbefore_cancel: function(frm) {\n if(frm.doc.docstatus==1 && !frm.timeline.get_communications().length){\nfrappe.throw(__(\"Please Comment before Cancel\"));\nfrappe.validated = false; \n} \n},\nbefore_save: function(frm){\n//cur_frm.add_fetch('Customer', 'customer_type', 'customer_type');\n//cur_frm.add_fetch('Customer', 'tax_id', 'tax_id');\ncheck_cc();\n\n},\nafter_cancel: function(frm){\n//console.log(\"Cancelled\");\ncur_frm.set_value('generate_ncf',0);\n},\n\nonload: function(frm){\nif(frappe.pages['point-of-sale']){\nconsole.log('Billing from POS on ');\n\n$(\"div[data-fieldname=g_ncf]\").remove();\nfrm.script_manager.trigger('customer');\nconst g_ncf = frappe.ui.form.make_control({\n                df: {\n                    fieldname: 'g_ncf',\n                    fieldtype: 'Check',\n                    label: __('Comprobante Fiscal'),\n\t\n\t\tonchange: () => {\n\t\t\t\tlet current_value=isg_ncf();\n\t\t\t\t//console.log(isg_ncf()+' Current value');\n\t\t\t\tcur_frm.set_value(\"generate_ncf\",current_value);\n\t\t\t\t//console.log('sweetxxx-'+cur_frm.doc.generate_ncf);\n\t\t\t\tisg_ncf(current_value);\n\t\t\t\t}\n                },\n                parent: $('.customer-field'),\n                render_input: true,\n            });\n\n}\n// if doc is local set g_ncf to read only \n// if doc is returned set g_ncf to read only and update ncf form return against\n\n \t\tif(frm.doc.is_return==1) {\n \t\t\t/*Auto fetch ncf for the first sales invoice and make generate ncf read only in case of return */\n\t\t    \tcur_frm.set_value(\"generate_ncf\",0);\n \t\t    \tcur_frm.set_df_property(\"generate_ncf\", \"read_only\",true);\n \t\t    \tcur_frm.add_fetch('return_against', 'ncf', 'ncf');\n \t    \t\tcur_frm.refresh_field(\"ncf\");\n \t\t\tcur_frm.refresh_fields();\n  \t\t}\n},\n\ncustomer:function(frm){\n    frappe.show_alert('test');\n    var customer = cur_frm.doc.customer;\n                 if(customer){\n                                   frappe.call({\n                                               method: 'frappe.client.get_value',\n                                               freeze: true,\n                                               args: {\n                                                   'doctype': 'Customer',\n                                                   'filters': {'name': customer},\n                                                   'fieldname': [\n                                                    'customer_type',\n\t\t\t\t\t\t    'tax_id'\n                                                   ]\n                                               },\n                                               callback: function(r) {\n                                                   if (!r.exc) {\n            \t\t\t\t\t//console.log(r.message);\n                                               var response_cus_type = r.message.customer_type;\n\t\t\t\t\t\tlet tax_id = r.message.tax_id;\n\t\t\t\t\t\tlet customer_type = r.message.customer_type;\n            \t\t\t\t\tcur_frm.set_value('tax_id',tax_id);\n\t\t\t\t\t\tcur_frm.set_value('customer_type',customer_type);\n                                               if(response_cus_type=='Final Clients'){\n                                                frm.set_value('generate_ncf',0);\n\t\t\t\t\t\t//isg_ncf(0);\n\t\t\t\t//console.log(frm.doc.generate_ncf+'<-> '+$(\"input[data-fieldname=g_ncf]\").val() );\n\t\t\t\t\t\t\n                                                   }else if (response_cus_type=='Businesses'||response_cus_type=='Government Entities'){\n                                                  // cur_frm.set_value('generate_ncf',1);\n//cur_frm.set_df_property(\"generate_ncf\", \"read_only\",true);\nisg_ncf(1);\n//console.log(frm.doc.generate_ncf+'<-> '+$(\"input[data-fieldname=g_ncf]\").val() );\n            \n                                                   }\n                                               }\n                                           }\n});\n}\n},\n});\n",
  "view": "Form"
 },
 {
  "docstatus": 0,
  "doctype": "Client Script",
  "dt": "Payment Entry",
  "enabled": 1,
  "modified": "2018-11-21 19:47:13.274296",
  "name": "Payment Entry-Client",
  "parent": null,
  "parentfield": null,
  "parenttype": null,
  "script": "frappe.ui.form.on(\"Payment Entry\", {\nbefore_submit: function(frm){\nvar permitted = ['sgonzalez@berenice.com.do', 'egonzalez@berenice.com.do', 'druiz@berenice.com.do'];\nif(!permitted.includes(frappe.session.user_email)){\n//frappe.perm.doctype_perm[\"Payment Entry\"][0].submit=0;\n//frappe.throw('Not allowed');\nfrappe.validated = false;\n}\n}\n})",
  "view": "Form"
 },
 {
  "docstatus": 0,
  "doctype": "Client Script",
  "dt": "Stock Reconciliation",
  "enabled": 1,
  "modified": "2018-12-21 11:38:46.344097",
  "name": "Stock Reconciliation-Client",
  "parent": null,
  "parentfield": null,
  "parenttype": null,
  "script": "frappe.ui.form.on('Stock Reconciliation Item',{\nbarcode: function(frm, cdt, cdn){\nvar child = locals[cdt][cdn];\n\nif(child.item_code){\n\tchild.warehouse=frm.doc.warehouse;\n\tvar row = $('div[data-idx='+child.idx+']');\n\tconsole.log('got item code '+ child.barcode+' --->idx '+child.idx);\n\trow.find('div[data-fieldname=\"qty\"]').find('input').select();\n\t\n\nfrappe.call({ \nmethod: \"frappe.client.get\", \nargs: { doctype: \"Item Price\", \nfilters: { \"price_list\": 'Standard Selling', \n\"item_code\": child.item_code } },async: false,\ncallback: function (data) { \nif (!data.exc) { \nvar price = data.message.price_list_rate;\nfrm.set_value(child.item_tax, 110);\nfrm.refresh_field(\"items\"); \nchild.precio_bruto = price; \n} \n} \n});\n\nfrappe.call({ \nmethod: \"frappe.client.get\", \nargs: { \ndoctype: \"Item\", \nfilters: { \"item_code\": child.item_code } },async: false,\ncallback: function (data) { \nif (!data.exc) {\nvar tax = data.message.taxes[0].tax_rate; \nchild.item_tax=tax; \n} \n} \n});\n}\nchild.precio_total = child.precio_bruto * (child.item_tax/100 + 1);\nconsole.log(child.precio_total);\ncur_frm.add_child(\"items\");\ncur_frm.refresh_field(\"items\"); \n},\n});",
  "view": "Form"
 },
 {
  "docstatus": 0,
  "doctype": "Client Script",
  "dt": "POS Invoice",
  "enabled": 1,
  "modified": "2021-09-21 11:13:28.457195",
  "name": "POS Invoice-Form",
  "parent": null,
  "parentfield": null,
  "parenttype": null,
  "script": "/* CUSTOM FUNCTION */\n\nconst isg_ncf = function () {\n  let value = arguments[0];\n  //console.log(value +' << checkbox on'+arguments[0]);\n  if (value) {\n    //console.log(value+' << ncf checked'); \n    $(\"input[data-fieldname=g_ncf]\").prop('checked', value);\n    cur_frm.set_value('generate_ncf', value);\n    //console.log('Arg-->'+arguments.length+' Checked--> '+value);\n  } else {\n    let res = $(\"input[data-fieldname=g_ncf]\").prop(\"checked\") || false;\n    $(\"input[data-fieldname=g_ncf]\").prop('checked', value);\n    // console.log(' Checked--> '+res);\n    return res;\n  }\n};\n//function imprimir(){\n//console.log('pagando con CC');\n//}\n\nfunction check_cc() {\n  try {\n    let cc = cur_frm.doc.payments[2].amount;\n    // \tconsole.log(cc);\n    if (cc) {\n      isg_ncf(1);\n      console.log('pagando con CC' + cur_frm.doc.payments[2].amount);\n    }\n  } catch (err) {\n    console.log('Houston we have a problem,No fue con tarjeta: : ' + err);\n  }\n}\n\nfrappe.ui.form.on('POS Invoice', {\n  before_cancel: function (frm) {\n    if (frm.doc.docstatus == 1 && !frm.timeline.get_communications().length) {\n      frappe.throw(__(\"Please Comment before Cancel\"));\n      frappe.validated = false;\n    }\n  },\n  before_save: function (frm) {\n    check_cc();\n\n  },\n  after_cancel: function (frm) {\n    //console.log(\"Cancelled\");\n    cur_frm.set_value('generate_ncf', 0);\n  },\n\n  onload: function (frm) {\n    if (frappe.pages['point-of-sale']) {\n      console.log('Billing from POS on ');\n\n      $(\"div[data-fieldname=g_ncf]\").remove();\n      frm.script_manager.trigger('customer');\n      const g_ncf = frappe.ui.form.make_control({\n        df: {\n          fieldname: 'g_ncf',\n          fieldtype: 'Check',\n          label: __('Comprobante Fiscal'),\n\n          onchange: () => {\n            let current_value = isg_ncf();\n            // \t\tconsole.log(current_value +'<-- Current value');\n            frm.set_value(\"generate_ncf\", current_value);\n            //console.log('sweetxxx-'+cur_frm.doc.generate_ncf);\n            isg_ncf(current_value);\n          }\n        },\n        parent: $('.filter-section .label'),\n        render_input: true,\n      });\n\n    }\n\n    if (frm.doc.is_return == 1) {\n      /*Auto fetch ncf for the first sales invoice and make generate ncf read only in case of return */\n      cur_frm.set_value(\"generate_ncf\", 0);\n      cur_frm.set_df_property(\"generate_ncf\", \"read_only\", true);\n      cur_frm.add_fetch('return_against', 'ncf', 'ncf');\n      cur_frm.refresh_field(\"ncf\");\n      cur_frm.refresh_fields();\n    }\n  },\n  payments: function(frm){\n    let payment_mode = frm.doc.payments;\n    payment_mode.forEach((mop, index)=>{\n       console.log(mop, index);\n    });\n},\n  customer: function (frm) {\n    var customer = cur_frm.doc.customer;\n    if (customer) {\n      frappe.call({\n        method: 'frappe.client.get_value',\n        freeze: true,\n        args: {\n          'doctype': 'Customer',\n          'filters': {\n            'name': customer\n          },\n          'fieldname': [\n            'customer_type',\n            'tax_id'\n          ]\n        },\n        callback: function (r) {\n          if (!r.exc) {\n            //console.log(r.message);\n            var response_cus_type = r.message.customer_type;\n            let tax_id = r.message.tax_id;\n            let customer_type = r.message.customer_type;\n            cur_frm.set_value('tax_id', tax_id);\n            cur_frm.set_value('customer_type', customer_type);\n            if (response_cus_type == 'Final Clients') {\n              isg_ncf(0);\n            } else if (response_cus_type == 'Businesses' || response_cus_type == 'Government Entities') {\n              isg_ncf(1);\n\n            }\n          }\n        }\n      });\n    }\n  },\n});\n\n\nfrappe.ui.form.on('Sales Invoice Payment', {\n\trefresh(frm) {\n\t\t// your code here\n\t\tconsole.log('from child', frm);\n\t},\n\tmode_of_payment(frm){\n\t    console.log(frm.mode_of_payment, frm.amount);\n\t}\n});",
  "view": "Form"
 }
]